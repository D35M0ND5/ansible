    
    # - name: Load package list
    #   include_vars:
    #     file: pkglist.txt
    #     name: package_list

    # - name: Load aur package list
    #   include_vars:
    #     file: aur_pkglist.txt
    #     name: package_list_aur

    - name: Install base packages
      pacman:
        name: "{{ item }}"
        state: present
      with_items: "{{ lookup('file', 'pkglist.txt').splitlines() }}"       
      retries: 3
      delay: 10  # Seconds between retries

    - name: Install AUR packages
      command: >
        bash -c 'git clone https://aur.archlinux.org/{{ item }}.git /tmp/{{ item }}
        && cd /tmp/{{ item }}
        && makepkg -si --noconfirm'
      with_items: "{{ lookup('file', 'aur_pkglist.txt').splitlines() }}"
      become: false
      changed_when: false  # Avoid false idempotency warnings

    - name: Install AUR packages (user mode)
      block:
        - name: Create AUR build directory
          file:
            path: "/tmp/aur_builds"
            state: directory
            mode: '0755'
          become: false
          changed_when: false

        - name: Install AUR packages
          command: >
            bash -c '
            git clone https://aur.archlinux.org/{{ item }}.git /tmp/aur_builds/{{ item }} &&
            cd /tmp/aur_builds/{{ item }} &&
            makepkg -si --noconfirm --needed'
          args:
            creates: "/usr/bin/{{ item.split('-bin')[0] }}"  # Skip if binary exists
          loop: "{{ lookup('file', 'aur_pkglist.txt').splitlines() | select('match', '^[a-zA-Z0-9-]+$') }}"
          become: false
          environment:
            HOME: "/home/{{ ansible_user }}"
            PKGDEST: "/tmp/aur_builds"
          register: aur_install
          changed_when: aur_install.rc == 0  # Only shows changed if successful

        - name: Clean build files
          file:
            path: "/tmp/aur_builds"
            state: absent
          become: false
          when: aur_install is changed